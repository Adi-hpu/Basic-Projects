
import numpy as np

def initialize_particles(num_particles, dim, bounds):
    particles = np.random.uniform(bounds[0], bounds[1], size=(num_particles, dim))
    velocities = np.random.rand(num_particles, dim)
    best_positions = np.copy(particles)
    best_costs = np.full(num_particles, float('inf'))
    return particles, velocities, best_positions, best_costs

def update_velocity(velocity, inertia, c1, c2, particle_position, best_position, global_best_position):
    return inertia * velocity + c1 * np.random.rand(len(particle_position)) * (best_position - particle_position) + c2 * np.random.rand(len(particle_position)) * (global_best_position - particle_position)

def update_position(position, velocity):
    return position + velocity

def objective_function(x):
#     # Replace this with your actual objective function
#     return np.sum(x**2)
    const1 = x[1] <= 3.2 or x[1] >= 6.4
    const2 = (x[0]**2 + x[1]**2) >= 1
    const3 = x[0] != x[1]
    
    if const1 and const2 and const3:
        o = np.sum(x**2)
    else:
        o = np.sum(x**2) + 200

    return o

def pso(num_particles, dim, bounds, max_iter, inertia, c1, c2):
    particles, velocities, best_positions, best_costs = initialize_particles(num_particles, dim, bounds)
    global_best_position = None
    global_best_cost = float('inf')

    for iteration in range(max_iter):
        for i in range(num_particles):
            cost = objective_function(particles[i])
            if cost < best_costs[i]:
                best_costs[i] = cost
                best_positions[i] = np.copy(particles[i])
            if cost < global_best_cost:
                global_best_cost = cost
                global_best_position = np.copy(particles[i])

        for i in range(num_particles):
            velocities[i] = update_velocity(velocities[i], inertia, c1, c2, particles[i], best_positions[i], global_best_position)
            particles[i] = update_position(particles[i], velocities[i])

    print(f'Iteration {iteration + 1}: Best Cost = {global_best_cost}\nGlobal Best Postion: {global_best_position}')

# Example usage
num_particles = 10
dim = 10
bounds = (-100, 100)
max_iter = 100
inertia = 0.5
c1 = 2
c2 = 2

pso(num_particles, dim, bounds, max_iter, inertia, c1, c2)


# In[77]:


import numpy as np
import matplotlib.pyplot as plt

def ObjectiveFunction(x):
    const1 = x[1] <= 3.2 or x[1]>=6.4;
    const2 = (x[0]**2 + x[1]**2) >= 1
    const3= x[0]!=x[1]
    
    if const1==1 and const2==1 and const3==1:
        o = np.sum(x**2)
    else:
        o = np.sum(x**2)+200

    return o

# Meshgrid creation
x = np.arange(-10, 10, 0.05)
y = np.arange(-10, 10, 0.05)
x_new, y_new = np.meshgrid(x, y)

# Evaluate the objective function on the meshgrid
z = np.zeros_like(x_new)
for i in range(x_new.shape[0]):
    for j in range(x_new.shape[1]):
        current_x = np.array([x_new[i, j], y_new[i, j]])
        z[i, j] = ObjectiveFunction(current_x)

# Plotting the 3D surface
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(x_new, y_new, z, cmap='viridis')

ax.set_xlabel('x1')
ax.set_ylabel('x2')
ax.set_zlabel('Objective Function Value')

plt.show()


